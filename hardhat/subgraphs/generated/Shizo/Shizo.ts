// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class EntityChanged extends ethereum.Event {
  get params(): EntityChanged__Params {
    return new EntityChanged__Params(this);
  }
}

export class EntityChanged__Params {
  _event: EntityChanged;

  constructor(event: EntityChanged) {
    this._event = event;
  }

  get changer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get entity(): EntityChangedEntityStruct {
    return changetype<EntityChangedEntityStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class EntityChangedEntityStruct extends ethereum.Tuple {
  get t(): i32 {
    return this[0].toI32();
  }

  get level(): i32 {
    return this[1].toI32();
  }

  get rarity(): i32 {
    return this[2].toI32();
  }

  get customColor(): i32 {
    return this[3].toI32();
  }

  get customName(): string {
    return this[4].toString();
  }

  get pos(): EntityChangedEntityPosStruct {
    return changetype<EntityChangedEntityPosStruct>(this[5].toTuple());
  }
}

export class EntityChangedEntityPosStruct extends ethereum.Tuple {
  get lat(): i32 {
    return this[0].toI32();
  }

  get lon(): i32 {
    return this[1].toI32();
  }
}

export class LevelUp extends ethereum.Event {
  get params(): LevelUp__Params {
    return new LevelUp__Params(this);
  }
}

export class LevelUp__Params {
  _event: LevelUp;

  constructor(event: LevelUp) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get land(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get level(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Purchase extends ethereum.Event {
  get params(): Purchase__Params {
    return new Purchase__Params(this);
  }
}

export class Purchase__Params {
  _event: Purchase;

  constructor(event: Purchase) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RoadLimitationChanged extends ethereum.Event {
  get params(): RoadLimitationChanged__Params {
    return new RoadLimitationChanged__Params(this);
  }
}

export class RoadLimitationChanged__Params {
  _event: RoadLimitationChanged;

  constructor(event: RoadLimitationChanged) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockStatus(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Shizo__entitiesResultPosStruct extends ethereum.Tuple {
  get lat(): i32 {
    return this[0].toI32();
  }

  get lon(): i32 {
    return this[1].toI32();
  }
}

export class Shizo__entitiesResult {
  value0: i32;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: string;
  value5: Shizo__entitiesResultPosStruct;

  constructor(
    value0: i32,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: string,
    value5: Shizo__entitiesResultPosStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromTuple(this.value5));
    return map;
  }

  getT(): i32 {
    return this.value0;
  }

  getLevel(): i32 {
    return this.value1;
  }

  getRarity(): i32 {
    return this.value2;
  }

  getCustomColor(): i32 {
    return this.value3;
  }

  getCustomName(): string {
    return this.value4;
  }

  getPos(): Shizo__entitiesResultPosStruct {
    return this.value5;
  }
}

export class Shizo__getDistanceTraversedResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Shizo__getTransitStepsResultValue0Struct extends ethereum.Tuple {
  get distance(): i32 {
    return this[0].toI32();
  }

  get lat(): i32 {
    return this[1].toI32();
  }

  get lon(): i32 {
    return this[2].toI32();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }
}

export class Shizo__marketplaceResult {
  value0: boolean;
  value1: Address;
  value2: BigInt;

  constructor(value0: boolean, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getListing(): boolean {
    return this.value0;
  }

  getPublisher(): Address {
    return this.value1;
  }

  getPrice(): BigInt {
    return this.value2;
  }
}

export class Shizo__roadBlockStorageResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getPropsCount(): BigInt {
    return this.value0;
  }

  getLastPropIndex(): BigInt {
    return this.value1;
  }
}

export class Shizo__staticPositionsResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromI32(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    return map;
  }

  getLat(): i32 {
    return this.value0;
  }

  getLon(): i32 {
    return this.value1;
  }
}

export class Shizo__teleportsPropsResult {
  value0: i32;
  value1: BigInt;

  constructor(value0: i32, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getCooldown(): i32 {
    return this.value0;
  }

  getLastTeleportTime(): BigInt {
    return this.value1;
  }
}

export class Shizo__transitsResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: i32, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getT(): i32 {
    return this.value0;
  }

  getStepsCount(): BigInt {
    return this.value1;
  }

  getDepartureTime(): BigInt {
    return this.value2;
  }
}

export class Shizo extends ethereum.SmartContract {
  static bind(address: Address): Shizo {
    return new Shizo("Shizo", address);
  }

  BIKE_SPEED(): i32 {
    let result = super.call("BIKE_SPEED", "BIKE_SPEED():(uint8)", []);

    return result[0].toI32();
  }

  try_BIKE_SPEED(): ethereum.CallResult<i32> {
    let result = super.tryCall("BIKE_SPEED", "BIKE_SPEED():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  COLOR_NULL(): i32 {
    let result = super.call("COLOR_NULL", "COLOR_NULL():(uint8)", []);

    return result[0].toI32();
  }

  try_COLOR_NULL(): ethereum.CallResult<i32> {
    let result = super.tryCall("COLOR_NULL", "COLOR_NULL():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  COLOR_RED(): i32 {
    let result = super.call("COLOR_RED", "COLOR_RED():(uint8)", []);

    return result[0].toI32();
  }

  try_COLOR_RED(): ethereum.CallResult<i32> {
    let result = super.tryCall("COLOR_RED", "COLOR_RED():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  MAX_DELTA_TIME(): BigInt {
    let result = super.call("MAX_DELTA_TIME", "MAX_DELTA_TIME():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_DELTA_TIME(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_DELTA_TIME",
      "MAX_DELTA_TIME():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PRICE(): BigInt {
    let result = super.call("PRICE", "PRICE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PRICE", "PRICE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ROAD_BLOCKED(): i32 {
    let result = super.call("ROAD_BLOCKED", "ROAD_BLOCKED():(uint8)", []);

    return result[0].toI32();
  }

  try_ROAD_BLOCKED(): ethereum.CallResult<i32> {
    let result = super.tryCall("ROAD_BLOCKED", "ROAD_BLOCKED():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  ROAD_ONEWAY_NEG(): i32 {
    let result = super.call("ROAD_ONEWAY_NEG", "ROAD_ONEWAY_NEG():(uint8)", []);

    return result[0].toI32();
  }

  try_ROAD_ONEWAY_NEG(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "ROAD_ONEWAY_NEG",
      "ROAD_ONEWAY_NEG():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  ROAD_ONEWAY_POS(): i32 {
    let result = super.call("ROAD_ONEWAY_POS", "ROAD_ONEWAY_POS():(uint8)", []);

    return result[0].toI32();
  }

  try_ROAD_ONEWAY_POS(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "ROAD_ONEWAY_POS",
      "ROAD_ONEWAY_POS():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  ROAD_UNBLOCKED(): i32 {
    let result = super.call("ROAD_UNBLOCKED", "ROAD_UNBLOCKED():(uint8)", []);

    return result[0].toI32();
  }

  try_ROAD_UNBLOCKED(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "ROAD_UNBLOCKED",
      "ROAD_UNBLOCKED():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  ROYALITY(): BigInt {
    let result = super.call("ROYALITY", "ROYALITY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ROYALITY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ROYALITY", "ROYALITY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TAXI_SPEED(): i32 {
    let result = super.call("TAXI_SPEED", "TAXI_SPEED():(uint8)", []);

    return result[0].toI32();
  }

  try_TAXI_SPEED(): ethereum.CallResult<i32> {
    let result = super.tryCall("TAXI_SPEED", "TAXI_SPEED():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  WALK_SPEED(): i32 {
    let result = super.call("WALK_SPEED", "WALK_SPEED():(uint8)", []);

    return result[0].toI32();
  }

  try_WALK_SPEED(): ethereum.CallResult<i32> {
    let result = super.tryCall("WALK_SPEED", "WALK_SPEED():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  entities(param0: BigInt): Shizo__entitiesResult {
    let result = super.call(
      "entities",
      "entities(uint256):(uint8,uint8,uint8,uint8,string,(int32,int32))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Shizo__entitiesResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toString(),
      changetype<Shizo__entitiesResultPosStruct>(result[5].toTuple())
    );
  }

  try_entities(param0: BigInt): ethereum.CallResult<Shizo__entitiesResult> {
    let result = super.tryCall(
      "entities",
      "entities(uint256):(uint8,uint8,uint8,uint8,string,(int32,int32))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Shizo__entitiesResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toString(),
        changetype<Shizo__entitiesResultPosStruct>(value[5].toTuple())
      )
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDistanceTraversed(addrs: Address): Shizo__getDistanceTraversedResult {
    let result = super.call(
      "getDistanceTraversed",
      "getDistanceTraversed(address):(uint32,uint256)",
      [ethereum.Value.fromAddress(addrs)]
    );

    return new Shizo__getDistanceTraversedResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getDistanceTraversed(
    addrs: Address
  ): ethereum.CallResult<Shizo__getDistanceTraversedResult> {
    let result = super.tryCall(
      "getDistanceTraversed",
      "getDistanceTraversed(address):(uint32,uint256)",
      [ethereum.Value.fromAddress(addrs)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Shizo__getDistanceTraversedResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getTransitSteps(
    addrs: Address
  ): Array<Shizo__getTransitStepsResultValue0Struct> {
    let result = super.call(
      "getTransitSteps",
      "getTransitSteps(address):((uint16,int32,int32,uint256)[])",
      [ethereum.Value.fromAddress(addrs)]
    );

    return result[0].toTupleArray<Shizo__getTransitStepsResultValue0Struct>();
  }

  try_getTransitSteps(
    addrs: Address
  ): ethereum.CallResult<Array<Shizo__getTransitStepsResultValue0Struct>> {
    let result = super.tryCall(
      "getTransitSteps",
      "getTransitSteps(address):((uint16,int32,int32,uint256)[])",
      [ethereum.Value.fromAddress(addrs)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Shizo__getTransitStepsResultValue0Struct>()
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLand(tokenId: BigInt): boolean {
    let result = super.call("isLand", "isLand(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isLand(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLand", "isLand(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRoad(tokenId: BigInt): boolean {
    let result = super.call("isRoad", "isRoad(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isRoad(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isRoad", "isRoad(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  marketplace(param0: BigInt): Shizo__marketplaceResult {
    let result = super.call(
      "marketplace",
      "marketplace(uint256):(bool,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Shizo__marketplaceResult(
      result[0].toBoolean(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_marketplace(
    param0: BigInt
  ): ethereum.CallResult<Shizo__marketplaceResult> {
    let result = super.tryCall(
      "marketplace",
      "marketplace(uint256):(bool,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Shizo__marketplaceResult(
        value[0].toBoolean(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  mintedTokenIds(param0: BigInt): BigInt {
    let result = super.call(
      "mintedTokenIds",
      "mintedTokenIds(uint64):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_mintedTokenIds(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintedTokenIds",
      "mintedTokenIds(uint64):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintedTokenIdsCount(): BigInt {
    let result = super.call(
      "mintedTokenIdsCount",
      "mintedTokenIdsCount():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_mintedTokenIdsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintedTokenIdsCount",
      "mintedTokenIdsCount():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  readLastRoadblockStatuses(tokenIds: Array<BigInt>): Array<boolean> {
    let result = super.call(
      "readLastRoadblockStatuses",
      "readLastRoadblockStatuses(uint256[]):(bool[])",
      [ethereum.Value.fromUnsignedBigIntArray(tokenIds)]
    );

    return result[0].toBooleanArray();
  }

  try_readLastRoadblockStatuses(
    tokenIds: Array<BigInt>
  ): ethereum.CallResult<Array<boolean>> {
    let result = super.tryCall(
      "readLastRoadblockStatuses",
      "readLastRoadblockStatuses(uint256[]):(bool[])",
      [ethereum.Value.fromUnsignedBigIntArray(tokenIds)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBooleanArray());
  }

  roadBlockStorage(param0: BigInt): Shizo__roadBlockStorageResult {
    let result = super.call(
      "roadBlockStorage",
      "roadBlockStorage(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Shizo__roadBlockStorageResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_roadBlockStorage(
    param0: BigInt
  ): ethereum.CallResult<Shizo__roadBlockStorageResult> {
    let result = super.tryCall(
      "roadBlockStorage",
      "roadBlockStorage(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Shizo__roadBlockStorageResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  shenAddress(): Address {
    let result = super.call("shenAddress", "shenAddress():(address)", []);

    return result[0].toAddress();
  }

  try_shenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("shenAddress", "shenAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  shizoRequiredForLvlup(tokenId: BigInt): BigInt {
    let result = super.call(
      "shizoRequiredForLvlup",
      "shizoRequiredForLvlup(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_shizoRequiredForLvlup(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "shizoRequiredForLvlup",
      "shizoRequiredForLvlup(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  staticPositions(param0: Address): Shizo__staticPositionsResult {
    let result = super.call(
      "staticPositions",
      "staticPositions(address):(int32,int32)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Shizo__staticPositionsResult(
      result[0].toI32(),
      result[1].toI32()
    );
  }

  try_staticPositions(
    param0: Address
  ): ethereum.CallResult<Shizo__staticPositionsResult> {
    let result = super.tryCall(
      "staticPositions",
      "staticPositions(address):(int32,int32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Shizo__staticPositionsResult(value[0].toI32(), value[1].toI32())
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  teleportsProps(param0: BigInt): Shizo__teleportsPropsResult {
    let result = super.call(
      "teleportsProps",
      "teleportsProps(uint256):(uint24,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Shizo__teleportsPropsResult(
      result[0].toI32(),
      result[1].toBigInt()
    );
  }

  try_teleportsProps(
    param0: BigInt
  ): ethereum.CallResult<Shizo__teleportsPropsResult> {
    let result = super.tryCall(
      "teleportsProps",
      "teleportsProps(uint256):(uint24,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Shizo__teleportsPropsResult(value[0].toI32(), value[1].toBigInt())
    );
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  transits(param0: Address): Shizo__transitsResult {
    let result = super.call(
      "transits",
      "transits(address):(uint8,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Shizo__transitsResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_transits(param0: Address): ethereum.CallResult<Shizo__transitsResult> {
    let result = super.tryCall(
      "transits",
      "transits(address):(uint8,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Shizo__transitsResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _shenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AbortTransitCall extends ethereum.Call {
  get inputs(): AbortTransitCall__Inputs {
    return new AbortTransitCall__Inputs(this);
  }

  get outputs(): AbortTransitCall__Outputs {
    return new AbortTransitCall__Outputs(this);
  }
}

export class AbortTransitCall__Inputs {
  _call: AbortTransitCall;

  constructor(call: AbortTransitCall) {
    this._call = call;
  }
}

export class AbortTransitCall__Outputs {
  _call: AbortTransitCall;

  constructor(call: AbortTransitCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CancelTransitCall extends ethereum.Call {
  get inputs(): CancelTransitCall__Inputs {
    return new CancelTransitCall__Inputs(this);
  }

  get outputs(): CancelTransitCall__Outputs {
    return new CancelTransitCall__Outputs(this);
  }
}

export class CancelTransitCall__Inputs {
  _call: CancelTransitCall;

  constructor(call: CancelTransitCall) {
    this._call = call;
  }
}

export class CancelTransitCall__Outputs {
  _call: CancelTransitCall;

  constructor(call: CancelTransitCall) {
    this._call = call;
  }
}

export class ChangeRoadLimitationsCall extends ethereum.Call {
  get inputs(): ChangeRoadLimitationsCall__Inputs {
    return new ChangeRoadLimitationsCall__Inputs(this);
  }

  get outputs(): ChangeRoadLimitationsCall__Outputs {
    return new ChangeRoadLimitationsCall__Outputs(this);
  }
}

export class ChangeRoadLimitationsCall__Inputs {
  _call: ChangeRoadLimitationsCall;

  constructor(call: ChangeRoadLimitationsCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get isBlock(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ChangeRoadLimitationsCall__Outputs {
  _call: ChangeRoadLimitationsCall;

  constructor(call: ChangeRoadLimitationsCall) {
    this._call = call;
  }
}

export class FinishTransitCall extends ethereum.Call {
  get inputs(): FinishTransitCall__Inputs {
    return new FinishTransitCall__Inputs(this);
  }

  get outputs(): FinishTransitCall__Outputs {
    return new FinishTransitCall__Outputs(this);
  }
}

export class FinishTransitCall__Inputs {
  _call: FinishTransitCall;

  constructor(call: FinishTransitCall) {
    this._call = call;
  }
}

export class FinishTransitCall__Outputs {
  _call: FinishTransitCall;

  constructor(call: FinishTransitCall) {
    this._call = call;
  }
}

export class ListOnMarketplaceCall extends ethereum.Call {
  get inputs(): ListOnMarketplaceCall__Inputs {
    return new ListOnMarketplaceCall__Inputs(this);
  }

  get outputs(): ListOnMarketplaceCall__Outputs {
    return new ListOnMarketplaceCall__Outputs(this);
  }
}

export class ListOnMarketplaceCall__Inputs {
  _call: ListOnMarketplaceCall;

  constructor(call: ListOnMarketplaceCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ListOnMarketplaceCall__Outputs {
  _call: ListOnMarketplaceCall;

  constructor(call: ListOnMarketplaceCall) {
    this._call = call;
  }
}

export class LvlupCall extends ethereum.Call {
  get inputs(): LvlupCall__Inputs {
    return new LvlupCall__Inputs(this);
  }

  get outputs(): LvlupCall__Outputs {
    return new LvlupCall__Outputs(this);
  }
}

export class LvlupCall__Inputs {
  _call: LvlupCall;

  constructor(call: LvlupCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LvlupCall__Outputs {
  _call: LvlupCall;

  constructor(call: LvlupCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _type(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get rarity(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get lat(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get lon(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get signature(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PurchaseCall extends ethereum.Call {
  get inputs(): PurchaseCall__Inputs {
    return new PurchaseCall__Inputs(this);
  }

  get outputs(): PurchaseCall__Outputs {
    return new PurchaseCall__Outputs(this);
  }
}

export class PurchaseCall__Inputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PurchaseCall__Outputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }
}

export class RemoveFromMarketplaceCall extends ethereum.Call {
  get inputs(): RemoveFromMarketplaceCall__Inputs {
    return new RemoveFromMarketplaceCall__Inputs(this);
  }

  get outputs(): RemoveFromMarketplaceCall__Outputs {
    return new RemoveFromMarketplaceCall__Outputs(this);
  }
}

export class RemoveFromMarketplaceCall__Inputs {
  _call: RemoveFromMarketplaceCall;

  constructor(call: RemoveFromMarketplaceCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveFromMarketplaceCall__Outputs {
  _call: RemoveFromMarketplaceCall;

  constructor(call: RemoveFromMarketplaceCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class StartTransitCall extends ethereum.Call {
  get inputs(): StartTransitCall__Inputs {
    return new StartTransitCall__Inputs(this);
  }

  get outputs(): StartTransitCall__Outputs {
    return new StartTransitCall__Outputs(this);
  }
}

export class StartTransitCall__Inputs {
  _call: StartTransitCall;

  constructor(call: StartTransitCall) {
    this._call = call;
  }

  get _type(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get steps(): Array<StartTransitCallStepsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      StartTransitCallStepsStruct
    >();
  }

  get signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class StartTransitCall__Outputs {
  _call: StartTransitCall;

  constructor(call: StartTransitCall) {
    this._call = call;
  }
}

export class StartTransitCallStepsStruct extends ethereum.Tuple {
  get distance(): i32 {
    return this[0].toI32();
  }

  get lat(): i32 {
    return this[1].toI32();
  }

  get lon(): i32 {
    return this[2].toI32();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }
}

export class TeleportCall extends ethereum.Call {
  get inputs(): TeleportCall__Inputs {
    return new TeleportCall__Inputs(this);
  }

  get outputs(): TeleportCall__Outputs {
    return new TeleportCall__Outputs(this);
  }
}

export class TeleportCall__Inputs {
  _call: TeleportCall;

  constructor(call: TeleportCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TeleportCall__Outputs {
  _call: TeleportCall;

  constructor(call: TeleportCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}
